<%- include('partials/header'); -%>
<style>
    .outerRing{
        display: flex;
        justify-content: center;
        align-items: center;
        width: 215px;
        height: 215px;
        border-radius: 50%;
        background: red;
        margin: 40px;
    }

    .timer{
        color: white;
        width: 200px;
        height: 200px;
        border-radius: 50%;
        background: black;
        display: flex;
        justify-content: center;
        align-items: center;
        flex-direction: column;
        font-size: 2em;
        z-index: 1;
    }
</style>
<h1 id="title">Tomato Timer</h1>
<div class="container" >
    <form action="/timer/save" method="post">
        <div class="row" style="position: relative; justify-content: center; align-items: center;">
            <div class="col-lg-4 col-md-4 col-sm-12">
                <label for="studyTime">Study Minutes:</label>
                <input type="number" id="studyTime" name="studyTime" min = "1"/>
            </div>
        </div>
        <div class="row" style="position: relative; justify-content: center; align-items: center;">
            <div class="col-lg-4 col-md-4 col-sm-12">
                <label for="pauseTime">Pause Minutes:</label>
                <input type="number" id="pauseTime" name="pauseTime" min = "1"/>
            </div>
        </div>
        <div class="row" style="position: relative; justify-content: center; align-items: center;">
            <div class="col-lg-4 col-md-4 col-sm-12">
                <label for="cileNum">Cicle Number:</label>
                <input type="number" id="cicleNum" name="cicleNum" min="1"/>
            </div>
        </div>
        <div class="row" style="position: relative; justify-content: center; align-items: center; margin-top: 10px;">
            <div class="col-lg-2 col-md-2 col-sm-4">
                <button id="set" class="btn btn-outline-info">Set</button>
            </div>
            <div class="col-lg-2 col-md-2 col-sm-4">
                <button type="submit" id="startstop" class="btn btn-outline-info">Start</button>
            </div>
        </div>
    </form>
    <div class="row" style="position: relative; justify-content: center; align-items: center;">
        <div class="col-lg-4 col-md-4 col-sm-12">
            <div class="outerRing">
                <div class="timer" id="timerDisplay">00:00</div>
            </div>
        </div>
    </div>
</div>

<script>
    const startstop = document.querySelector("#startstop");
    const studyMin_input = document.querySelector("#studyTime");
    const pauseMin_input = document.querySelector("#pauseTime");
    const cicleNum_input = document.querySelector("#cicleNum");
    const timer = document.querySelector(".timer");
    const progressBar = document.querySelector(".outerRing");
    const setB = document.querySelector("#set");
    const title = document.querySelector("#title");
    
    var sessionID;

    var go;
    var started = false;
    var study = true;

    let studyMin = 0;
    let pauseMin = 0;
    let progress = null;
    let studyDegTravel = 0;
    let pauseDegTravel = 0;
    let secRem = 0;
    let MinRem = 0;
    let ps;
    let pe;
    let color1;
    let color2 = "#17171a";

    let progressStartStudy = 0;
    let progressEndStudy = 0;
    let progressStartPause = 0;
    let progressEndPause = 0;
    let cicle = 0;

    /*const getCookie = (name) => {
        const value = "; " + document.cookie;
        const parts = value.split("; " + name + "=");
        if (parts.length === 2) return  parts.pop().split(";").shift();
    }
    const deleteCookie = (name) => {
        document.cookie = name + '=; max-age=0;';
    }
    const parseCookie = (cookie) => {
        const decodedCookie = decodeURIComponent(cookie);
        return  JSON.parse(decodedCookie);
    }*/

    let dataCookie = getCookie('data');
    deleteCookie('data');

    if(dataCookie){
        const timerInfo = parseCookie(dataCookie);
        if(timerInfo != ""){
            studyMin_input.value = timerInfo.studyTime;
            pauseMin_input.value = timerInfo.pauseTime;
            cicleNum_input.value = timerInfo.cicles;
        }

    }else{
        console.log("error cookie");
    }

    function timesUP(){
        title.innerHTML="STUDIO FINITO";
        if(progress){
            clearInterval(progress);
        }
        progressBar.style.background = `conic-gradient(
                #17171a 360deg,
                #17171a 360deg
            )`;

        document.body.style.background = "#00aa51";

        timer.innerHTML = `${String(studyMin).padStart(2,'0')}:00`;

        setB.innerHTML = "Reset";
        startstop.innerHTML = "Start";
        progress = null;
        progressStartStudy = 0;
        progressStartPause = 0;
        started = false;
        study = true;
        studyMin = 0;
        go = true;
    }

    function tomatoProgress(){

        if(go){
            if(study){
                title.innerHTML="STUDIO";
                ps = ++progressStartStudy;
                pe = progressEndStudy;
                dt = studyDegTravel;
                color1 = "#9d0000";
            }else{
                title.innerHTML="PAUSA";
                ps = ++progressStartPause;
                pe = progressEndPause;
                dt = pauseDegTravel;
                color1 = "blue";
            }
        }

        secRem = Math.floor((pe - ps)%60);
        MinRem = Math.floor((pe - ps)/60);

        timer.innerHTML = `${String(MinRem).padStart(2,'0')}:${String(secRem).padStart(2,'0')}`;

        progressBar.style.background = `conic-gradient(
                ${color1} ${ps * dt}deg,
                ${color2} ${ps * dt}deg
            )`;
        if(ps == pe){
            cicle -= 1;
            if(cicle <= 0){
                timesUP();
                return;
            }
            study = !study;
            progressStartPause = 0;
            progressStartStudy = 0;
        }
    }

    function reset(){
        title.innerHTML = "Tomato Timer";
        timer.innerHTML = `00:00`;
        progressBar.style.background = `conic-gradient(
                red 360deg,
                red 360deg
            )`;
        setB.innerHTML = "Set";
        startstop.innerHTML = "Start";
        progressStartStudy = 0;
        progressStartPause = 0;
        studyMin = 0;
        if(progress){
            clearInterval(progress);
        }
        progress = null;
        started = false;
        $.ajax({
            url: "/timer/update",
            method: "GET",
            data: {sID: null},
            success: function(data){
                console.log("success nella reset");
            },
            error: function(error){
                console.log("error: ",error);
            }
        });
    }

    document.querySelector("#set").addEventListener('click',function (e){
        e.preventDefault();
        if(setB.innerHTML === "Reset"){
            reset();
            return;
        }
        pauseMin = pauseMin_input.value == "NaN" ? 0 : parseInt(pauseMin_input.value,10);
        cicle = cicleNum_input.value == "NaN" ? 0 : parseInt(cicleNum_input.value,10);

        if(pauseMin < 0 || cicle < 0){
            alert("Invalid value for pause or cicle");
            return;
        }
        studyMin = parseInt(studyMin_input.value,10);


        if(cicle){
            if(!pauseMin){
            pauseMin = 1;
            }
            cicle *= 2;
        }else{
            cicle = 1;
            if(pauseMin){
            cicle = 2;
            }
        }

        if(String(studyMin) != "NaN" && studyMin >= 1){
            progressEndStudy = studyMin*60;
            progressEndPause = pauseMin*60;
            studyDegTravel = 360 / progressEndStudy;
            if(pauseMin){
                pauseDegTravel = 360 / progressEndPause;
            }
            timer.innerHTML = `${String(studyMin).padStart(2,'0')}:00`;
        }
    });

    document.querySelector("#startstop").addEventListener('click',function (event){
        event.preventDefault();

        if(startstop.innerHTML === "Start"){
            if(String(studyMin) != "NaN" && studyMin >= 1){
                startstop.innerHTML = "Stop";
                setB.innerHTML = "Reset";

                $.ajax({
                   url: "/timer/update" ,
                   type: "GET",
                   data: {sID: null},
                   success: function(data){
                        console.log("success nella start");
                   },
                   error: function(data){
                        console.log("error");
                   }
                });

                go = true;
                if(!started){
                    $.ajax({
                        url:"/timer/save",
                        type: "GET",
                        data: {timerInfo: [studyMin,pauseMin,cicle]},
                        success: function(data){
                            sessionID = data;
                        },
                        error: function(error){
                            console.log("error: ",error);
                        }
                    });
                    started = true;
                    progress = setInterval(tomatoProgress,1000);
                }
            }else{
                alert("Enter valid time!");
            }
        }else{
            $.ajax({
                url:"/timer/update",
                type: "GET",
                data: {sID: sessionID},
                success: function(data){
                    if(data){
                        reset();
                    }
                },
                error: function(error){
                    console.log("error: ",error);
                }
            });
            startstop.innerHTML = "Start";
            go = false;
        }
    });
</script>
<%- include('partials/footer'); -%>